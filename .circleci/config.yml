version: 2.1
jobs:
  test:
    parameters:
      python_version:
        type: string
        default: "3.8"
      include_lint:
        type: boolean
        default: false
    docker:
      - image: "circleci/python:<<parameters.python_version>>"
    working_directory: ~/zipload
    steps:
      - checkout
      # Let's install the dependencies
      - run:
          name: Install Dependencies
          command: |
            poetry install
      # Save's the specified path as a cache. This is the path Poetry uses to install the dependencies
      # So if you don't install anything new, this folder won't change and the cache will be effective
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
      - when:
          condition: <<parameters.include_lint>>
          steps:
            - run:
                name: Lint
                command: |
                  poetry run pylint *.py
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test_results/python<<parameters.python_version>>
            poetry run pytest --junitxml=/tmp/test_results/python<<parameters.python_version>>/results.xml
      - store_test_results:
          path: /tmp/test_results/
  # This is the definition of another job, the one we use to publish the package to PyPI
  deploy:
    # Same environment
    docker:
        - image: circleci/python:3
    steps:
      # Gets the code
      - checkout
      # Use `poetry publish` to Publish the package using username and password from CircleCI environment variables
      # Which can be configured inside CircleCI's interface
      - run:
          name: Push to PyPI
          command: |
            poetry publish \
              --build \
              --username "${PYPI_USERNAME}" \
              --password "${PYPI_PASSWORD}" \
              --no-interaction

workflows:
  version: 2.1
  build_test_deploy:
    jobs:
      # Test all versions we'd like to support
      - test:
          name: "test_python3.5"
          python_version: "3.5"
      - test:
          name: "test_python3.6"
          python_version: "3.6"
      - test:
          name: "test_python3.7"
          python_version: "3.7"
      - test:
          name: "test_python3.8"
          python_version: "3.8"
          include_lint: true
      # Runs the deployment job, just with a tagged build as well
      - deploy:
          requires:
            - test_python3.5
            - test_python3.6
            - test_python3.7
            - test_python3.8
          filters:
              tags:
                only: /v[0-9]+(\.[0-9]+)*/
              branches:
                ignore: /.*/
